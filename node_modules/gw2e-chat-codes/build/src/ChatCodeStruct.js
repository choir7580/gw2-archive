"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ChatCodeStruct = void 0;
var base64_js_1 = __importDefault(require("base64-js"));
var ChatCodeStruct = /** @class */ (function () {
    function ChatCodeStruct() {
        this.bytes = [];
        this.offset = 0;
    }
    // -- ENCODING --
    ChatCodeStruct.prototype.encodeToChatCode = function () {
        // Convert to a base64 encoded string
        var base64String = base64_js_1.default.fromByteArray(Uint8Array.from(this.bytes));
        // Return in the chat code enclosure
        return '[&' + base64String + ']';
    };
    ChatCodeStruct.prototype.write1Byte = function (value) {
        this.bytes.push(value);
    };
    ChatCodeStruct.prototype.write2Bytes = function (value) {
        this.bytes.push((value >> 0x00) & 0xff);
        this.bytes.push((value >> 0x08) & 0xff);
    };
    ChatCodeStruct.prototype.write3Bytes = function (value) {
        this.bytes.push((value >> 0x00) & 0xff);
        this.bytes.push((value >> 0x08) & 0xff);
        this.bytes.push((value >> 0x10) & 0xff);
    };
    ChatCodeStruct.prototype.write4Bytes = function (value) {
        this.bytes.push((value >> 0x00) & 0xff);
        this.bytes.push((value >> 0x08) & 0xff);
        this.bytes.push((value >> 0x10) & 0xff);
        this.bytes.push((value >> 0x18) & 0xff);
    };
    ChatCodeStruct.prototype.writeTraitSelection = function (_a) {
        var trait1 = _a[0], trait2 = _a[1], trait3 = _a[2];
        var value = ((trait3 & 3) << 4) | ((trait2 & 3) << 2) | ((trait1 & 3) << 0);
        this.write1Byte(value);
    };
    ChatCodeStruct.prototype.writeDynamicArray = function (values, bytesPerValue) {
        this.write1Byte(values.length);
        for (var _i = 0, values_1 = values; _i < values_1.length; _i++) {
            var value = values_1[_i];
            bytesPerValue === 2 ? this.write2Bytes(value) : this.write4Bytes(value);
        }
    };
    // -- DECODING --
    ChatCodeStruct.prototype.decodeFromChatCode = function (chatCode) {
        // Remove the chat code enclosure
        var base64String = chatCode.slice(2, chatCode.length - 1);
        // Convert into a byte array
        this.bytes = Array.from(base64_js_1.default.toByteArray(base64String));
    };
    ChatCodeStruct.prototype.read1Byte = function () {
        return this.bytes[this.offset++];
    };
    ChatCodeStruct.prototype.read2Bytes = function () {
        return this.bytes[this.offset++] | (this.bytes[this.offset++] << 8);
    };
    ChatCodeStruct.prototype.read3Bytes = function () {
        return (this.bytes[this.offset++] |
            (this.bytes[this.offset++] << 8) |
            (this.bytes[this.offset++] << 16));
    };
    ChatCodeStruct.prototype.read4Bytes = function () {
        return (this.bytes[this.offset++] |
            (this.bytes[this.offset++] << 8) |
            (this.bytes[this.offset++] << 16) |
            (this.bytes[this.offset++] << 24));
    };
    ChatCodeStruct.prototype.readTraitSelection = function () {
        return [
            this.bytes[this.offset] & 3,
            (this.bytes[this.offset] >> 2) & 3,
            (this.bytes[this.offset++] >> 4) & 3,
        ];
    };
    ChatCodeStruct.prototype.readDynamicArray = function (bytesPerValue) {
        var length = this.read1Byte();
        if (length === 0) {
            return undefined;
        }
        var values = [];
        for (var i = 0; i < length; i++) {
            values.push(bytesPerValue === 2 ? this.read2Bytes() : this.read4Bytes());
        }
        return values;
    };
    ChatCodeStruct.prototype.atEnd = function () {
        return this.offset >= this.bytes.length;
    };
    return ChatCodeStruct;
}());
exports.ChatCodeStruct = ChatCodeStruct;
//# sourceMappingURL=ChatCodeStruct.js.map