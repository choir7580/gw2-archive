"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var index_1 = __importDefault(require("../src/index"));
var testCases = [
    { type: 'map', id: 825, code: '[&BDkDAAA=]' },
    { type: 'skill', id: 5842, code: '[&BtIWAAA=]' },
    { type: 'trait', id: 1010, code: '[&B/IDAAA=]' },
    { type: 'recipe', id: 8, code: '[&CQgAAAA=]' },
    { type: 'skin', id: 2286, code: '[&Cu4IAAA=]' },
    { type: 'outfit', id: 28, code: '[&CxwAAAA=]' },
    { type: 'objective', id: '38-11', code: '[&DAsAAAAmAAAA]' },
];
var itemTestCases = [
    { type: 'item', meta: { id: 46762 }, code: '[&AgGqtgAA]' },
    { type: 'item', meta: { id: 46762, quantity: 42 }, code: '[&AiqqtgAA]' },
    { type: 'item', meta: { id: 46762, upgrades: [24575] }, code: '[&AgGqtgBA/18AAA==]' },
    { type: 'item', meta: { id: 46762, upgrades: [24575, 24615] }, code: '[&AgGqtgBg/18AACdgAAA=]' },
    { type: 'item', meta: { id: 46762, skin: 3709 }, code: '[&AgGqtgCAfQ4AAA==]' },
    {
        type: 'item',
        meta: { id: 46762, skin: 3709, upgrades: [24575] },
        code: '[&AgGqtgDAfQ4AAP9fAAA=]',
    },
    {
        type: 'item',
        meta: { id: 46762, skin: 3709, upgrades: [24575, 24615] },
        code: '[&AgGqtgDgfQ4AAP9fAAAnYAAA]',
    },
    {
        type: 'item',
        meta: { id: 46762, quantity: 42, skin: 3709, upgrades: [24575, 24615] },
        code: '[&AiqqtgDgfQ4AAP9fAAAnYAAA]',
    },
];
var buildTestCases = [
    {
        type: 'build',
        code: '[&DQYfLSkaOCcXAXQANRfLAL4BjwBOARwBlwCWAAAAAAAAAAAAAAAAAAAAAAAAAA==]',
        legacyCode: '[&DQYfLSkaOCcXAXQANRfLAL4BjwBOARwBlwCWAAAAAAAAAAAAAAAAAAAAAAA=]',
        meta: {
            profession: 6,
            specialization1: 31,
            traitChoices1: [1, 3, 2],
            specialization2: 41,
            traitChoices2: [2, 2, 1],
            specialization3: 56,
            traitChoices3: [3, 1, 2],
            terrestrialHealSkill: 279,
            terrestrialUtilitySkill1: 5941,
            terrestrialUtilitySkill2: 446,
            terrestrialUtilitySkill3: 334,
            terrestrialEliteSkill: 151,
            aquaticHealSkill: 116,
            aquaticUtilitySkill1: 203,
            aquaticUtilitySkill2: 143,
            aquaticUtilitySkill3: 284,
            aquaticEliteSkill: 150, // Tornado
        },
    },
    {
        type: 'build',
        code: '[&DQQhNx4XNy4uFyUPvgC9ALoAvADpFpYBLhaXAQEECxMAAAAAAAAAAAAAAAAAAA==]',
        legacyCode: '[&DQQhNx4XNy4uFyUPvgC9ALoAvADpFpYBLhaXAQEECxMAAAAAAAAAAAAAAAA=]',
        meta: {
            profession: 4,
            specialization1: 33,
            traitChoices1: [3, 1, 3],
            specialization2: 30,
            traitChoices2: [3, 1, 1],
            specialization3: 55,
            traitChoices3: [2, 3, 2],
            terrestrialHealSkill: 5934,
            terrestrialUtilitySkill1: 190,
            terrestrialUtilitySkill2: 186,
            terrestrialUtilitySkill3: 5865,
            terrestrialEliteSkill: 5678,
            aquaticHealSkill: 3877,
            aquaticUtilitySkill1: 189,
            aquaticUtilitySkill2: 188,
            aquaticUtilitySkill3: 406,
            aquaticEliteSkill: 407,
            terrestrialPet1: 1,
            terrestrialPet2: 4,
            aquaticPet1: 11,
            aquaticPet2: 19, // Juvenile River Drake
        },
    },
    {
        type: 'build',
        code: '[&DQkPFQMqND/cEdwRKxIrEgYSBhLUEdQRyhHKEQ4NDxAAAAAAAAAAAAAAAAAAAA==]',
        legacyCode: '[&DQkPFQMqND/cEdwRKxIrEgYSBhLUEdQRyhHKEQ4NDxAAAAAAAAAAAAAAAAA=]',
        meta: {
            profession: 9,
            specialization1: 15,
            traitChoices1: [1, 1, 1],
            specialization2: 3,
            traitChoices2: [2, 2, 2],
            specialization3: 52,
            traitChoices3: [3, 3, 3],
            terrestrialHealSkill: 4572,
            terrestrialUtilitySkill1: 4651,
            terrestrialUtilitySkill2: 4614,
            terrestrialUtilitySkill3: 4564,
            terrestrialEliteSkill: 4554,
            aquaticHealSkill: 4572,
            aquaticUtilitySkill1: 4651,
            aquaticUtilitySkill2: 4614,
            aquaticUtilitySkill3: 4564,
            aquaticEliteSkill: 4554,
            terrestrialLegend1: 14,
            terrestrialLegend2: 13,
            aquaticLegend1: 15,
            aquaticLegend2: 16, // Dwarf
        },
    },
    {
        type: 'build',
        code: '[&DQQZGggqHiYlD3kAvQAAALkAAAC8AAAAlwEAABYAAAAAAAAAAAAAAAAAAAACMwAjAARn9wAA3fYAAJv2AADo9gAA]',
        meta: {
            profession: 4,
            specialization1: 25,
            traitChoices1: [2, 2, 1],
            specialization2: 8,
            traitChoices2: [2, 2, 2],
            specialization3: 30,
            traitChoices3: [2, 1, 2],
            terrestrialHealSkill: 3877,
            terrestrialUtilitySkill1: 189,
            terrestrialUtilitySkill2: 185,
            terrestrialUtilitySkill3: 188,
            terrestrialEliteSkill: 407,
            terrestrialPet1: 22,
            terrestrialPet2: 0,
            aquaticHealSkill: 121,
            aquaticUtilitySkill1: 0,
            aquaticUtilitySkill2: 0,
            aquaticUtilitySkill3: 0,
            aquaticEliteSkill: 0,
            aquaticPet1: 0,
            aquaticPet2: 0,
            selectedWeapons: [51, 35],
            selectedSkillVariants: [63335, 63197, 63131, 63208],
        },
    },
];
describe('encoding', function () {
    testCases.map(function (test) {
        it('encodes ' + test.type + ' chat codes correctly', function () {
            expect(index_1.default.encode(test.type, test.id)).toEqual(test.code);
        });
    });
    it('encodes item chat codes correctly', function () {
        expect(index_1.default.encode('item', 46762)).toEqual('[&AgGqtgAA]');
        // @ts-expect-error
        expect(index_1.default.encode('item', '46762')).toEqual('[&AgGqtgAA]');
        itemTestCases.map(function (test) {
            expect(index_1.default.encode(test.type, test.meta)).toEqual(test.code);
        });
    });
    it('encodes item stacks from the API correctly', function () {
        var item = {
            id: 46762,
            slot: 'WeaponA1',
            upgrades: [24554, 24615],
            skin: 5807,
            binding: 'Account',
        };
        expect(index_1.default.encode('item', item)).toEqual('[&AgGqtgDgrxYAAOpfAAAnYAAA]');
    });
    it('encodes build chat codes correctly', function () {
        buildTestCases.map(function (test) {
            expect(index_1.default.encode(test.type, test.meta)).toEqual(test.code);
        });
    });
    it('fails gracefully for a invalid type', function () {
        expect(index_1.default.encode('nonexisting', 123)).toEqual(false);
    });
    it('fails gracefully for a invalid id', function () {
        expect(index_1.default.encode('item', '#notanid')).toEqual(false);
        expect(index_1.default.encode('item', -5)).toEqual(false);
        expect(index_1.default.encode('item', {})).toEqual(false);
        expect(index_1.default.encode('item', { id: '#notanid' })).toEqual(false);
        expect(index_1.default.encode('item', { id: -5 })).toEqual(false);
        expect(index_1.default.encode('objective', '1-foo')).toEqual(false);
        expect(index_1.default.encode('objective', 'foo-1')).toEqual(false);
        expect(index_1.default.encode('objective', '#notanid')).toEqual(false);
        expect(index_1.default.encode('objective', -5)).toEqual(false);
        expect(index_1.default.encode('objective', {})).toEqual(false);
        expect(index_1.default.encode('objective', { id: '#notanid' })).toEqual(false);
        expect(index_1.default.encode('objective', { id: -5 })).toEqual(false);
        expect(index_1.default.encode('map', '#notanid')).toEqual(false);
        expect(index_1.default.encode('map', -5)).toEqual(false);
        expect(index_1.default.encode('map', {})).toEqual(false);
        expect(index_1.default.encode('map', { id: '#notanid' })).toEqual(false);
        expect(index_1.default.encode('map', { id: -5 })).toEqual(false);
    });
});
describe('decoding', function () {
    testCases.map(function (test) {
        it('decodes ' + test.type + ' chat codes correctly', function () {
            expect(index_1.default.decode(test.code)).toEqual({ type: test.type, id: test.id });
        });
    });
    it('decodes item chat codes correctly', function () {
        itemTestCases.map(function (test) {
            expect(index_1.default.decode(test.code)).toEqual(__assign({ type: test.type, quantity: 1 }, test.meta));
        });
    });
    it('decodes build chat codes correctly', function () {
        buildTestCases.map(function (test) {
            expect(index_1.default.decode(test.code)).toEqual(__assign({ type: test.type }, test.meta));
        });
    });
    it('decodes legacy build chat codes correctly', function () {
        buildTestCases
            .filter(function (_a) {
            var legacyCode = _a.legacyCode;
            return legacyCode !== undefined;
        })
            .map(function (test) {
            expect(index_1.default.decode(test.legacyCode)).toEqual(__assign({ type: test.type }, test.meta));
        });
    });
    it('fails gracefully for a invalid format', function () {
        expect(index_1.default.decode('this is not a chat code')).toEqual(false);
    });
    it('fails gracefully for a invalid type', function () {
        expect(index_1.default.decode('[&BXsAAAA=]')).toEqual(false);
    });
});
//# sourceMappingURL=index.spec.js.map